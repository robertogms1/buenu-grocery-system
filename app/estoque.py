# üì¶ M√≥dulo de gerenciamento de estoque para o Buenu Grocery System

# Importa o m√≥dulo 'json' da biblioteca padr√£o do Python, usado para salvar e carregar dados em formato JSON
import json

# Importa o m√≥dulo 'os' para verificar se o arquivo de dados existe no sistema
import os

# Caminho do arquivo onde o estoque ser√° salvo (dentro da pasta 'data')
ARQUIVO_ESTOQUE = 'data/estoque.json'


# üß© Fun√ß√£o que carrega o estoque do arquivo JSON (se existir), ou cria um dicion√°rio vazio
def carregar_estoque():
    if os.path.exists(ARQUIVO_ESTOQUE):  # Verifica se o arquivo existe
        with open(ARQUIVO_ESTOQUE, 'r') as f:  # Abre o arquivo em modo leitura
            return json.load(f)  # Converte o conte√∫do JSON para um dicion√°rio Python
    return {}  # Retorna um dicion√°rio vazio se o arquivo n√£o existir


# üíæ Fun√ß√£o que salva o estado atual do estoque em formato JSON
def salvar_estoque(estoque):
    with open(ARQUIVO_ESTOQUE, 'w') as f:  # Abre o arquivo em modo escrita
        json.dump(estoque, f, indent=4)  # Salva o dicion√°rio no arquivo com indenta√ß√£o leg√≠vel


# ‚ûï Fun√ß√£o que adiciona um novo produto ou atualiza a quantidade de um existente
def adicionar_produto(estoque, codigo_barras, nome, preco, quantidade):
    if codigo_barras in estoque:  # Verifica se o c√≥digo de barras j√° existe no estoque
        estoque[codigo_barras]['quantidade'] += quantidade  # Soma as unidades √† quantidade atual
        print(f"üì¶ Produto j√° existente. Quantidade atualizada para {estoque[codigo_barras]['quantidade']}.")
    else:
        estoque[codigo_barras] = {  # Cria um novo item com as informa√ß√µes b√°sicas
            'nome': nome,
            'preco': preco,
            'quantidade': quantidade
        }
        print("‚úÖ Novo produto adicionado com sucesso.")
    salvar_estoque(estoque)  # Salva o estoque atualizado no arquivo


# üìã Fun√ß√£o que exibe todos os produtos cadastrados no estoque
def listar_produtos(estoque):
    print("\nüì¶ Produtos em estoque:")
    for cod_barras, info in estoque.items():  # Percorre todos os itens do dicion√°rio
        print(f"{info['nome']} | R${info['preco']} | Qtd: {info['quantidade']} | üßæ C√≥digo de Barras: {cod_barras}")


# üí∞ Fun√ß√£o que permite alterar o pre√ßo de um produto existente
def atualizar_preco(estoque, codigo_barras, novo_preco):
    if codigo_barras in estoque:  # Verifica se o produto est√° cadastrado
        preco_antigo = estoque[codigo_barras]['preco']  # Guarda o pre√ßo antigo
        estoque[codigo_barras]['preco'] = novo_preco  # Atualiza o valor do pre√ßo
        salvar_estoque(estoque)  # Salva a modifica√ß√£o no arquivo
        print(f"üí∞ Pre√ßo atualizado com sucesso: R${preco_antigo} ‚Üí R${novo_preco}")
    else:
        print("‚ö†Ô∏è Produto n√£o encontrado. Verifique o c√≥digo de barras informado.")


# üîß Bloco de teste: executado somente quando o arquivo √© executado diretamente
if __name__ == '__main__':
    est = carregar_estoque()  # Carrega o estoque do arquivo (ou cria vazio)

    # Adiciona um produto de teste
    #adicionar_produto(est, '7891234567890', 'Arroz 5kg', 25.90, 10)

    # Altera o pre√ßo desse produto
    #atualizar_preco(est, '7891234567890', 28.90)

    # Lista todos os produtos ap√≥s a modifica√ß√£o
    #listar_produtos(est)